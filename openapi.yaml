openapi: 3.0.0
info:
  title: Emotipal API
  description: Emotipal backend API for emotional wellness platform with activities, submissions, reminders, and user management
  version: 1.0.0
  contact:
    name: Emotipal Support
    email: support@emotipal.com
  license:
    name: Proprietary
    
servers:
  - url: https://api.emotipal.com
    description: Production server
  - url: https://api.dev.emotipal.com  
    description: Development server
  - url: https://api.staging.emotipal.com
    description: Staging server

security:
  - bearerAuth: []

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token obtained from login endpoint
      
  schemas:
    # Error Response
    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          description: Error message
        statusCode:
          type: integer
          description: HTTP status code
          
    # Auth Schemas
    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          description: User email address
        password:
          type: string
          description: User password
          
    RegisterRequest:
      type: object
      required:
        - email
        - password
        - role
      properties:
        firstName:
          type: string
          description: User first name
        lastName:
          type: string
          description: User last name
        email:
          type: string
          format: email
          description: User email address
        password:
          type: string
          description: User password
        phone:
          type: string
          description: User phone number
        role:
          type: string
          description: User role
        serviceProvided:
          type: string
          description: Service provided by user
          
    AuthTokens:
      type: object
      properties:
        accessToken:
          type: string
          description: JWT access token
        refreshToken:
          type: string
          description: JWT refresh token
        expiresIn:
          type: integer
          description: Token expiration time in seconds
          
    AuthResponse:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
        tokens:
          $ref: '#/components/schemas/AuthTokens'
          
    VerificationEmailRequest:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          format: email
          description: Email to send verification to
          
    ForgotPasswordRequest:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          format: email
          description: Email to send password reset to
          
    ResetPasswordRequest:
      type: object
      required:
        - token
        - newPassword
      properties:
        token:
          type: string
          description: Password reset token
        newPassword:
          type: string
          description: New password
          
    # User Schemas
    User:
      type: object
      properties:
        id:
          type: string
          description: Unique user identifier
        title:
          type: string
          description: User title
        firstName:
          type: string
          description: User first name
        lastName:
          type: string
          description: User last name
        personalId:
          type: string
          description: Personal ID number
        email:
          type: string
          format: email
          description: User email address
        phone:
          type: string
          description: User phone number
        dob:
          type: string
          description: Date of birth
        timezone:
          type: string
          description: User timezone
        lng:
          type: string
          description: User language preference
        notes:
          type: string
          description: Notes about the user
        role:
          type: string
          description: User role
        createdBy:
          type: string
          description: ID of user who created this user
        isEmailVerified:
          type: boolean
          description: Whether email is verified
        pendingInvitation:
          type: boolean
          description: Whether user has pending invitation
        creationDate:
          type: string
          format: date-time
          description: User creation date
        credits:
          type: number
          description: User credit balance
          
    UpdateUserRequest:
      type: object
      properties:
        personalProfile:
          $ref: '#/components/schemas/User'
        emergencyContacts:
          type: array
          items:
            $ref: '#/components/schemas/Profession'
        otherProfessionals:
          type: array
          items:
            $ref: '#/components/schemas/Profession'
            
    Profession:
      type: object
      properties:
        id:
          type: string
          description: Profession ID
        title:
          type: string
          description: Professional title
        firstName:
          type: string
          description: First name
        lastName:
          type: string
          description: Last name
        email:
          type: string
          format: email
          description: Email address
        phone:
          type: string
          description: Phone number
        relationShipToClient:
          type: string
          description: Relationship to client
          
    # Activity Schemas
    Activity:
      type: object
      properties:
        id:
          type: string
          description: Unique activity identifier
        title:
          type: string
          description: Activity title
        type:
          type: string
          enum: ['template', 'assignedActivity']
          description: Activity type
        availability:
          type: string
          enum: ['forYouOnly', 'specificAccess', 'group', 'allPractitioners']
          description: Activity availability
        status:
          type: string
          enum: ['draft', 'private', 'published']
          description: Activity status
        activityLanguage:
          type: string
          enum: ['en-GB', 'en-US', 'it']
          description: Activity language
        clientSubmissions:
          type: string
          enum: ['unlimited', 'single', 'minimum', 'maximum']
          description: Client submission type
        minimum:
          type: number
          minimum: 0
          maximum: 10000
          description: Minimum submissions
        maximum:
          type: number
          minimum: 0
          maximum: 10000
          description: Maximum submissions
        learnMoreUrl:
          type: string
          description: Learn more URL
        createdBy:
          type: string
          description: User who created the activity
        associatedUser:
          type: string
          description: Associated user ID
        visibleToClient:
          type: boolean
          description: Whether activity is visible to client
        tags:
          type: array
          items:
            type: string
            enum: ['bookmark', 'favorite']
          description: Activity tags
        blocks:
          type: array
          items:
            $ref: '#/components/schemas/ActivityBlock'
          description: Activity blocks
          
    CreateActivityRequest:
      type: object
      required:
        - title
      properties:
        title:
          type: string
          description: Activity title
        type:
          type: string
          enum: ['template', 'assignedActivity']
          description: Activity type
        availability:
          type: string
          enum: ['forYouOnly', 'specificAccess', 'group', 'allPractitioners']
          description: Activity availability
        status:
          type: string
          enum: ['draft', 'private', 'published']
          description: Activity status
        activityLanguage:
          type: string
          enum: ['en-GB', 'en-US', 'it']
          description: Activity language
        clientSubmissions:
          type: string
          enum: ['unlimited', 'single', 'minimum', 'maximum']
          description: Client submission type
        minimum:
          type: number
          minimum: 0
          maximum: 10000
          description: Minimum submissions
        maximum:
          type: number
          minimum: 0
          maximum: 10000
          description: Maximum submissions
        learnMoreUrl:
          type: string
          description: Learn more URL
        associatedUser:
          type: string
          description: Associated user ID
        visibleToClient:
          type: boolean
          description: Whether activity is visible to client
        tags:
          type: array
          items:
            type: string
            enum: ['bookmark', 'favorite']
          description: Activity tags
        blocks:
          type: array
          items:
            $ref: '#/components/schemas/CreateActivityBlockRequest'
          description: Activity blocks
          
    ActivityBlock:
      type: object
      properties:
        id:
          type: string
          description: Block ID
        type:
          type: string
          description: Block type
        title:
          type: string
          description: Block title
        description:
          type: object
          properties:
            plainText:
              type: string
              description: Plain text description
            editorState:
              type: string
              nullable: true
              description: Rich text editor state
        resourceMedia:
          type: object
          properties:
            url:
              type: string
              format: uri
              description: Media URL
            format:
              type: string
              description: Media format
            file:
              description: Media file
        resourceLinks:
          type: array
          items:
            type: object
            properties:
              url_text:
                type: string
                description: Link text
              url:
                type: string
                description: Link URL
          description: Resource links
        resourceType:
          type: string
          enum: ['image', 'video', 'audio', 'links', 'youtube']
          description: Resource type
        clientEntryMethod:
          type: string
          enum: ['single', 'table']
          description: Client entry method
        tableData:
          type: string
          description: Table data
          
    CreateActivityBlockRequest:
      type: object
      required:
        - type
        - title
      properties:
        type:
          type: string
          description: Block type
        title:
          type: string
          description: Block title
        description:
          type: object
          properties:
            plainText:
              type: string
              description: Plain text description
            editorState:
              type: string
              nullable: true
              description: Rich text editor state
        resourceMedia:
          type: object
          properties:
            url:
              type: string
              format: uri
              description: Media URL
            format:
              type: string
              description: Media format
            file:
              description: Media file
        resourceLinks:
          type: array
          items:
            type: object
            properties:
              url_text:
                type: string
                description: Link text
              url:
                type: string
                description: Link URL
          description: Resource links
        resourceType:
          type: string
          enum: ['image', 'video', 'audio', 'links', 'youtube']
          description: Resource type
        clientEntryMethod:
          type: string
          enum: ['single', 'table']
          description: Client entry method
        tableData:
          type: string
          description: Table data
          
    # Submission Schemas
    Submission:
      type: object
      properties:
        id:
          type: string
          description: Submission ID
        activityId:
          type: string
          description: Associated activity ID
        createdAt:
          type: string
          format: date-time
          description: Creation timestamp
        lastSubmissionData:
          type: string
          description: Last submission data
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp
          
    CreateSubmissionRequest:
      type: object
      required:
        - activityId
      properties:
        activityId:
          type: string
          description: Associated activity ID
        lastSubmissionData:
          type: string
          description: Submission data
          
    SubmissionBlock:
      type: object
      properties:
        id:
          type: string
          description: Submission block ID
        submissionId:
          type: string
          description: Associated submission ID
        blockId:
          type: string
          description: Associated activity block ID
        data:
          type: string
          description: Block submission data
        createdAt:
          type: string
          format: date-time
          description: Creation timestamp
          
    # Reminder Schemas
    Reminder:
      type: object
      properties:
        id:
          type: string
          description: Reminder ID
        title:
          type: string
          description: Reminder title
        days:
          type: array
          items:
            type: string
            enum: ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']
          minItems: 1
          description: Days of week for reminder
        time:
          type: object
          required:
            - hours
            - minutes
          properties:
            hours:
              type: number
              minimum: 0
              maximum: 23
              description: Hour of day (24-hour format)
            minutes:
              type: number
              minimum: 0
              maximum: 59
              description: Minutes past hour
        message:
          type: string
          maxLength: 178
          description: Reminder message
        status:
          type: string
          enum: ['active', 'inactive']
          description: Reminder status
        createdAt:
          type: string
          format: date-time
          description: Creation timestamp
        registeredPushTokens:
          type: string
          description: Registered push tokens
          
    CreateReminderRequest:
      type: object
      required:
        - days
        - time
        - message
      properties:
        title:
          type: string
          default: 'Reminder'
          description: Reminder title
        days:
          type: array
          items:
            type: string
            enum: ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']
          minItems: 1
          description: Days of week for reminder
        time:
          type: object
          required:
            - hours
            - minutes
          properties:
            hours:
              type: number
              minimum: 0
              maximum: 23
              description: Hour of day (24-hour format)
            minutes:
              type: number
              minimum: 0
              maximum: 59
              description: Minutes past hour
        message:
          type: string
          maxLength: 178
          description: Reminder message
        status:
          type: string
          enum: ['active', 'inactive']
          default: 'active'
          description: Reminder status
          
    # Push Token Schemas
    PushToken:
      type: object
      properties:
        deviceId:
          type: string
          description: Device ID
        token:
          type: string
          description: Push notification token
        platform:
          type: string
          description: Device platform
        createdAt:
          type: string
          format: date-time
          description: Creation timestamp
          
    CreatePushTokenRequest:
      type: object
      required:
        - deviceId
        - token
      properties:
        deviceId:
          type: string
          description: Device ID
        token:
          type: string
          description: Push notification token
        platform:
          type: string
          description: Device platform
          
    SendPushNotificationRequest:
      type: object
      required:
        - title
        - body
        - data
      properties:
        title:
          type: string
          description: Notification title
        body:
          type: string
          description: Notification body
        data:
          type: object
          description: Additional notification data
          
    # Credit Schemas  
    Credit:
      type: object
      properties:
        id:
          type: string
          description: Credit ID
        ownerId:
          type: string
          description: Owner user ID
        action:
          type: number
          enum: [1, 2, 3, 4, 5, 6]
          description: Credit event type (1=SignUpBonus, 2=CreditsPurchase, 3=FreeCredits, 4=ReferralBonus, 5=AddNewClient, 6=BuildWithAI)
        free:
          type: number
          description: Free credits amount
        purchased:
          type: number
          description: Purchased credits amount
        paid:
          type: number
          description: Paid amount
        consumed:
          type: number
          description: Consumed credits amount
        balance:
          type: number
          description: Current balance
        createdAt:
          type: string
          format: date-time
          description: Creation timestamp
          
    CreateCreditHistoryRequest:
      type: object
      required:
        - action
        - free
        - purchased
        - paid
        - consumed
        - balance
      properties:
        action:
          type: number
          enum: [1, 2, 3, 4, 5, 6]
          description: Credit event type
        free:
          type: number
          description: Free credits amount
        purchased:
          type: number
          description: Purchased credits amount
        paid:
          type: number
          description: Paid amount
        consumed:
          type: number
          description: Consumed credits amount
        balance:
          type: number
          description: Current balance
        userBalanceAdjustment:
          type: number
          default: 0
          description: User balance adjustment
          
    # Upload Task Schemas
    UploadTask:
      type: object
      properties:
        taskId:
          type: string
          description: Upload task ID
        status:
          type: string
          description: Upload status
        uploadUrl:
          type: string
          description: Pre-signed upload URL
        downloadUrl:
          type: string
          description: Download URL after processing
          
    CreateUploadTaskRequest:
      type: object
      required:
        - filename
        - contentType
      properties:
        filename:
          type: string
          description: File name
        contentType:
          type: string
          description: File content type
          
    # PDF Processing Schemas
    ProcessPDFRequest:
      type: object
      required:
        - pdfData
      properties:
        pdfData:
          type: string
          format: byte
          description: Base64 encoded PDF data
        filename:
          type: string
          description: PDF filename
          
    ProcessPDFResponse:
      type: object
      properties:
        executionArn:
          type: string
          description: Step function execution ARN
        status:
          type: string
          description: Processing status
          
    ProcessingStatus:
      type: object
      properties:
        status:
          type: string
          enum: ['RUNNING', 'SUCCEEDED', 'FAILED', 'TIMED_OUT', 'ABORTED']
          description: Execution status
        startDate:
          type: string
          format: date-time
          description: Execution start date
        stopDate:
          type: string
          format: date-time
          description: Execution stop date
        output:
          type: object
          description: Execution output
        error:
          type: string
          description: Error message if failed
          
    # Stripe Checkout
    CreateCheckoutSessionRequest:
      type: object
      required:
        - priceId
        - quantity
      properties:
        priceId:
          type: string
          description: Stripe price ID
        quantity:
          type: number
          description: Quantity of items
        successUrl:
          type: string
          description: Success redirect URL
        cancelUrl:
          type: string
          description: Cancel redirect URL
          
    CheckoutSessionResponse:
      type: object
      properties:
        sessionId:
          type: string
          description: Stripe session ID
        url:
          type: string
          description: Checkout URL
          
    # Pagination
    PaginationQuery:
      type: object
      properties:
        limit:
          type: number
          minimum: 1
          maximum: 100
          default: 10
          description: Number of items to return
        nextToken:
          type: string
          description: Token for next page
          
    PaginatedResponse:
      type: object
      properties:
        items:
          type: array
          description: List of items
        nextToken:
          type: string
          description: Token for next page
        hasMore:
          type: boolean
          description: Whether more items exist

paths:
  # Authentication Endpoints
  /auth/login:
    post:
      tags:
        - Authentication
      summary: User login
      description: Authenticate user with email and password
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                
  /auth/logout:
    post:
      tags:
        - Authentication
      summary: User logout
      description: Logout user and invalidate token
      responses:
        '200':
          description: Logout successful
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                
  /auth/register:
    post:
      tags:
        - Authentication
      summary: User registration
      description: Register a new user (requires verification token)
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '200':
          description: Registration successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Registration failed or invalid verification token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                
  /auth/send-verification-email:
    post:
      tags:
        - Authentication
      summary: Send verification email
      description: Send email verification link to user
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerificationEmailRequest'
      responses:
        '200':
          description: Verification email sent
        '400':
          description: Failed to send email
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                
  /auth/verify-email:
    post:
      tags:
        - Authentication
      summary: Verify email address
      description: Verify user email with verification token
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - token
              properties:
                token:
                  type: string
                  description: Email verification token
      responses:
        '200':
          description: Email verified successfully
        '400':
          description: Invalid or expired token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                
  /auth/forgot-password:
    post:
      tags:
        - Authentication
      summary: Request password reset
      description: Send password reset email to user
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ForgotPasswordRequest'
      responses:
        '200':
          description: Password reset email sent
        '400':
          description: Failed to send reset email
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                
  /auth/reset-password:
    post:
      tags:
        - Authentication
      summary: Reset password
      description: Reset user password with reset token
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPasswordRequest'
      responses:
        '200':
          description: Password reset successfully
        '400':
          description: Invalid or expired token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # User Management
  /users:
    get:
      tags:
        - Users
      summary: List users
      description: Get list of all users
      parameters:
        - name: limit
          in: query
          schema:
            type: number
            minimum: 1
            maximum: 100
            default: 10
          description: Number of users to return
        - name: nextToken
          in: query
          schema:
            type: string
          description: Token for pagination
      responses:
        '200':
          description: Users retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedResponse'
                  - type: object
                    properties:
                      items:
                        type: array
                        items:
                          $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                
    post:
      tags:
        - Users
      summary: Create user
      description: Create a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '200':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid user data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                
  /users/{id}:
    get:
      tags:
        - Users
      summary: Get user by ID
      description: Retrieve user information by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: User ID
      responses:
        '200':
          description: User retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                
    put:
      tags:
        - Users
      summary: Update user
      description: Update user information
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: User ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid user data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                
  /invited_users:
    post:
      tags:
        - Users
      summary: Retrieve invited user
      description: Get invited user information
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  format: email
                  description: Invited user email
      responses:
        '200':
          description: Invited user retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: Invited user not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Activities
  /activities:
    get:
      tags:
        - Activities
      summary: List activities
      description: Get list of activities with optional filters
      parameters:
        - name: type
          in: query
          schema:
            type: string
          description: Activity type filter
        - name: status
          in: query
          schema:
            type: string
          description: Activity status filter
        - name: associatedUser
          in: query
          schema:
            type: string
          description: Associated user filter
        - name: visibleToClient
          in: query
          schema:
            type: boolean
          description: Visible to client filter
        - name: limit
          in: query
          schema:
            type: number
            minimum: 1
            maximum: 100
            default: 10
          description: Number of activities to return
        - name: nextToken
          in: query
          schema:
            type: string
          description: Token for pagination
      responses:
        '200':
          description: Activities retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedResponse'
                  - type: object
                    properties:
                      items:
                        type: array
                        items:
                          $ref: '#/components/schemas/Activity'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                
    post:
      tags:
        - Activities
      summary: Create activity
      description: Create a new activity with optional blocks
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateActivityRequest'
      responses:
        '200':
          description: Activity created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Activity'
        '400':
          description: Invalid activity data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                
    put:
      tags:
        - Activities
      summary: Update activity
      description: Update an existing activity
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/CreateActivityRequest'
                - type: object
                  required:
                    - id
                  properties:
                    id:
                      type: string
                      description: Activity ID
      responses:
        '200':
          description: Activity updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Activity'
        '400':
          description: Invalid activity data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                
  /activities/{id}:
    get:
      tags:
        - Activities
      summary: Get activity by ID
      description: Retrieve activity information by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Activity ID
      responses:
        '200':
          description: Activity retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Activity'
        '404':
          description: Activity not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                
    delete:
      tags:
        - Activities
      summary: Delete activity
      description: Delete an activity by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Activity ID
      responses:
        '200':
          description: Activity deleted successfully
        '404':
          description: Activity not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                
  /activitiesWithLatestSubmission:
    get:
      tags:
        - Activities
      summary: List activities with latest submission
      description: Get activities with their latest submission data
      parameters:
        - name: limit
          in: query
          schema:
            type: number
            minimum: 1
            maximum: 100
            default: 10
          description: Number of activities to return
        - name: nextToken
          in: query
          schema:
            type: string
          description: Token for pagination
      responses:
        '200':
          description: Activities with submissions retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedResponse'
                  - type: object
                    properties:
                      items:
                        type: array
                        items:
                          allOf:
                            - $ref: '#/components/schemas/Activity'
                            - type: object
                              properties:
                                latestSubmission:
                                  $ref: '#/components/schemas/Submission'
                                  
  /activities/public:
    get:
      tags:
        - Activities
      summary: List public activities
      description: Get list of public activities (no authentication required)
      security: []
      parameters:
        - name: limit
          in: query
          schema:
            type: number
            minimum: 1
            maximum: 100
            default: 10
          description: Number of activities to return
        - name: nextToken
          in: query
          schema:
            type: string
          description: Token for pagination
      responses:
        '200':
          description: Public activities retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedResponse'
                  - type: object
                    properties:
                      items:
                        type: array
                        items:
                          $ref: '#/components/schemas/Activity'
                          
  /activities/{activityId}/activities-blocks:
    get:
      tags:
        - Activities
      summary: List activity blocks
      description: Get blocks for a specific activity
      parameters:
        - name: activityId
          in: path
          required: true
          schema:
            type: string
          description: Activity ID
      responses:
        '200':
          description: Activity blocks retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ActivityBlock'
        '404':
          description: Activity not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                
  /activities/public/{activityId}/activities-blocks/{activityOwnerId}:
    get:
      tags:
        - Activities
      summary: List public activity blocks
      description: Get blocks for a public activity (no authentication required)
      security: []
      parameters:
        - name: activityId
          in: path
          required: true
          schema:
            type: string
          description: Activity ID
        - name: activityOwnerId
          in: path
          required: true
          schema:
            type: string
          description: Activity owner ID
      responses:
        '200':
          description: Public activity blocks retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ActivityBlock'
        '404':
          description: Activity not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # PDF Processing
  /activities/process-pdf:
    post:
      tags:
        - Activities
      summary: Process PDF to create activity
      description: Upload and process PDF to automatically generate activity content
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProcessPDFRequest'
      responses:
        '200':
          description: PDF processing started successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProcessPDFResponse'
        '400':
          description: Invalid PDF or processing failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                
  /activities/process-pdf/status/{executionArn}:
    get:
      tags:
        - Activities
      summary: Get PDF processing status
      description: Check the status of PDF processing
      parameters:
        - name: executionArn
          in: path
          required: true
          schema:
            type: string
          description: Step function execution ARN
      responses:
        '200':
          description: Processing status retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProcessingStatus'
        '404':
          description: Execution not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Submissions
  /submissions:
    get:
      tags:
        - Submissions
      summary: List submissions
      description: Get list of submissions for activities
      parameters:
        - name: activityId
          in: query
          required: true
          schema:
            type: string
          description: Activity ID filter
        - name: nextPageToken
          in: query
          schema:
            type: string
          description: Token for pagination
        - name: limit
          in: query
          schema:
            type: number
          description: Number of submissions to return
      responses:
        '200':
          description: Submissions retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedResponse'
                  - type: object
                    properties:
                      items:
                        type: array
                        items:
                          $ref: '#/components/schemas/Submission'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                
    post:
      tags:
        - Submissions
      summary: Create submission
      description: Create a new submission for an activity
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSubmissionRequest'
      responses:
        '200':
          description: Submission created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Submission'
        '400':
          description: Invalid submission data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                
  /submissions/{id}:
    get:
      tags:
        - Submissions
      summary: Get submission by ID
      description: Retrieve submission information by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Submission ID
      responses:
        '200':
          description: Submission retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Submission'
        '404':
          description: Submission not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                
    put:
      tags:
        - Submissions
      summary: Update submission
      description: Update an existing submission
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Submission ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                lastSubmissionData:
                  type: string
                  description: Updated submission data
      responses:
        '200':
          description: Submission updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Submission'
        '400':
          description: Invalid submission data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                
  /submissions/{id}/blocks:
    post:
      tags:
        - Submissions
      summary: Create submission block
      description: Create a block submission for a submission
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Submission ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - blockId
                - data
              properties:
                blockId:
                  type: string
                  description: Activity block ID
                data:
                  type: string
                  description: Block submission data
      responses:
        '200':
          description: Submission block created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubmissionBlock'
        '400':
          description: Invalid block data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                
  /submissions/{id}/blocks/{blockId}:
    get:
      tags:
        - Submissions
      summary: Get submission block
      description: Retrieve a specific submission block
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Submission ID
        - name: blockId
          in: path
          required: true
          schema:
            type: string
          description: Block ID
      responses:
        '200':
          description: Submission block retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubmissionBlock'
        '404':
          description: Submission block not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                
    put:
      tags:
        - Submissions
      summary: Update submission block
      description: Update a specific submission block
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Submission ID
        - name: blockId
          in: path
          required: true
          schema:
            type: string
          description: Block ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: string
                  description: Updated block data
      responses:
        '200':
          description: Submission block updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubmissionBlock'
        '400':
          description: Invalid block data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                
  /submission/blocks:
    get:
      tags:
        - Submissions
      summary: List submission blocks
      description: Get list of submission blocks
      responses:
        '200':
          description: Submission blocks retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SubmissionBlock'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Reminders
  /reminders:
    get:
      tags:
        - Reminders
      summary: List reminders
      description: Get list of user reminders
      parameters:
        - name: status
          in: query
          schema:
            type: string
            enum: ['active', 'inactive']
          description: Reminder status filter
      responses:
        '200':
          description: Reminders retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Reminder'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                
    post:
      tags:
        - Reminders
      summary: Create reminder
      description: Create a new reminder
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateReminderRequest'
      responses:
        '200':
          description: Reminder created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reminder'
        '400':
          description: Invalid reminder data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                
  /reminders/{id}:
    put:
      tags:
        - Reminders
      summary: Update reminder
      description: Update an existing reminder
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Reminder ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/CreateReminderRequest'
                - type: object
                  required:
                    - id
                  properties:
                    id:
                      type: string
                      description: Reminder ID
      responses:
        '200':
          description: Reminder updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reminder'
        '400':
          description: Invalid reminder data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                
    delete:
      tags:
        - Reminders
      summary: Delete reminder
      description: Delete a reminder by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Reminder ID
      responses:
        '200':
          description: Reminder deleted successfully
        '404':
          description: Reminder not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                
  /reminders/{id}/days:
    delete:
      tags:
        - Reminders
      summary: Delete reminder days
      description: Remove specific days from a reminder
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Reminder ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - days
              properties:
                days:
                  type: array
                  items:
                    type: string
                    enum: ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']
                  minItems: 1
                  description: Days to remove from reminder
      responses:
        '200':
          description: Reminder days deleted successfully
        '404':
          description: Reminder not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Push Notifications
  /push-token:
    post:
      tags:
        - Push Notifications
      summary: Create push token
      description: Register a new push notification token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePushTokenRequest'
      responses:
        '200':
          description: Push token created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PushToken'
        '400':
          description: Invalid token data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                
  /push-token/{deviceId}:
    get:
      tags:
        - Push Notifications
      summary: Get push token
      description: Retrieve push token for a device
      parameters:
        - name: deviceId
          in: path
          required: true
          schema:
            type: string
          description: Device ID
      responses:
        '200':
          description: Push token retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PushToken'
        '404':
          description: Push token not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                
    put:
      tags:
        - Push Notifications
      summary: Update push token
      description: Update an existing push token
      parameters:
        - name: deviceId
          in: path
          required: true
          schema:
            type: string
          description: Device ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  description: Updated push token
                platform:
                  type: string
                  description: Updated platform
      responses:
        '200':
          description: Push token updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PushToken'
        '400':
          description: Invalid token data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                
    delete:
      tags:
        - Push Notifications
      summary: Delete push token
      description: Remove a push token for a device
      parameters:
        - name: deviceId
          in: path
          required: true
          schema:
            type: string
          description: Device ID
      responses:
        '200':
          description: Push token deleted successfully
        '404':
          description: Push token not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                
  /push-notifications:
    post:
      tags:
        - Push Notifications
      summary: Send push notification
      description: Send push notification to users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendPushNotificationRequest'
      responses:
        '200':
          description: Push notification sent successfully
        '400':
          description: Invalid notification data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Credits
  /credits/{email}:
    get:
      tags:
        - Credits
      summary: Get user credits
      description: Retrieve credit balance and history for a user
      parameters:
        - name: email
          in: path
          required: true
          schema:
            type: string
            format: email
          description: User email
      responses:
        '200':
          description: User credits retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Credit'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                
  /create_credit_history:
    post:
      tags:
        - Credits
      summary: Create credit history
      description: Add a new credit transaction to user history
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCreditHistoryRequest'
      responses:
        '200':
          description: Credit history created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credit'
        '400':
          description: Invalid credit data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Media Upload
  /upload-task:
    post:
      tags:
        - Media Upload
      summary: Create upload task
      description: Create a new media upload task with pre-signed URLs
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUploadTaskRequest'
      responses:
        '200':
          description: Upload task created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadTask'
        '400':
          description: Invalid upload request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                
  /upload-task/{taskId}:
    get:
      tags:
        - Media Upload
      summary: Get upload task status
      description: Retrieve upload task information and status
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            type: string
          description: Upload task ID
      responses:
        '200':
          description: Upload task retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadTask'
        '404':
          description: Upload task not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Payment
  /create-checkout-session:
    post:
      tags:
        - Payment
      summary: Create Stripe checkout session
      description: Create a Stripe checkout session for credit purchase
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCheckoutSessionRequest'
      responses:
        '200':
          description: Checkout session created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckoutSessionResponse'
        '400':
          description: Invalid checkout request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Todos (Simple endpoints)
  /todos:
    get:
      tags:
        - Todos
      summary: List todos
      description: Get list of user todos
      responses:
        '200':
          description: Todos retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      description: Todo ID
                    title:
                      type: string
                      description: Todo title
                    completed:
                      type: boolean
                      description: Whether todo is completed
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                
    post:
      tags:
        - Todos
      summary: Create todo
      description: Create a new todo item
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - title
              properties:
                title:
                  type: string
                  description: Todo title
                description:
                  type: string
                  description: Todo description
      responses:
        '200':
          description: Todo created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    description: Todo ID
                  title:
                    type: string
                    description: Todo title
                  completed:
                    type: boolean
                    description: Whether todo is completed
        '400':
          description: Invalid todo data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

tags:
  - name: Authentication
    description: User authentication and account management
  - name: Users
    description: User profile and account operations
  - name: Activities
    description: Activity creation, management, and PDF processing
  - name: Submissions
    description: Activity submission and response management
  - name: Reminders
    description: Reminder scheduling and management
  - name: Push Notifications
    description: Push notification token and sending management
  - name: Credits
    description: User credit balance and transaction management
  - name: Media Upload
    description: File upload and media management
  - name: Payment
    description: Payment processing and checkout
  - name: Todos
    description: Simple todo list management 